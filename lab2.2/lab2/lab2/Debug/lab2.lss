
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000268  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c5  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000322  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f9  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include <stdlib.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x0F;
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	81 bb       	out	0x11, r24	; 17
	
	char temp1, temp2, temp3;
	unsigned char cyfry[10] = {0b00111111, 0b00000110, 0b01011011,0b01001111, 0b01100110, 0b01101101,0b01111101,0b00000111, 0b01111111, 0b01101111};
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	de 01       	movw	r26, r28
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	8a 95       	dec	r24
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x26>
				    PORTA = ~cyfry[temp3];
					_delay_ms(2);
				}
			}
			else{
					PORTD = ~(1<<3);
  b0:	0f 2e       	mov	r0, r31
  b2:	f7 ef       	ldi	r31, 0xF7	; 247
  b4:	9f 2e       	mov	r9, r31
  b6:	f0 2d       	mov	r31, r0
  b8:	0f 2e       	mov	r0, r31
  ba:	fa e0       	ldi	r31, 0x0A	; 10
  bc:	cf 2e       	mov	r12, r31
  be:	d1 2c       	mov	r13, r1
  c0:	f0 2d       	mov	r31, r0
  c2:	0f 2e       	mov	r0, r31
  c4:	f4 e6       	ldi	r31, 0x64	; 100
  c6:	af 2e       	mov	r10, r31
  c8:	b1 2c       	mov	r11, r1
  ca:	f0 2d       	mov	r31, r0
					
					PORTD = ~(1<<3);
					PORTA = ~cyfry[temp1];
					_delay_ms(2);
										
					PORTD = ~(1<<2);
  cc:	0f 2e       	mov	r0, r31
  ce:	fb ef       	ldi	r31, 0xFB	; 251
  d0:	8f 2e       	mov	r8, r31
  d2:	f0 2d       	mov	r31, r0
					PORTA = ~cyfry[temp2];
					_delay_ms(2);
										
					PORTD = ~(1<<1);
  d4:	0f 2e       	mov	r0, r31
  d6:	fd ef       	ldi	r31, 0xFD	; 253
  d8:	7f 2e       	mov	r7, r31
  da:	f0 2d       	mov	r31, r0
  dc:	7e 01       	movw	r14, r28
  de:	23 e0       	ldi	r18, 0x03	; 3
  e0:	e2 0e       	add	r14, r18
  e2:	f1 1c       	adc	r15, r1
	unsigned char cyfry[10] = {0b00111111, 0b00000110, 0b01011011,0b01001111, 0b01100110, 0b01101101,0b01111101,0b00000111, 0b01111111, 0b01101111};
		
    /* Replace with your application code */
    while (1) 
    {
		for(int i = 2; i <= 142; i+=7){
  e4:	02 e0       	ldi	r16, 0x02	; 2
  e6:	10 e0       	ldi	r17, 0x00	; 0
			
		if(i < 100 && i > 10){
  e8:	c8 01       	movw	r24, r16
  ea:	0b 97       	sbiw	r24, 0x0b	; 11
  ec:	89 35       	cpi	r24, 0x59	; 89
  ee:	91 05       	cpc	r25, r1
  f0:	50 f5       	brcc	.+84     	; 0x146 <main+0xc4>
  f2:	c8 01       	movw	r24, r16
  f4:	b6 01       	movw	r22, r12
  f6:	0e 94 0a 01 	call	0x214	; 0x214 <__divmodhi4>
			
				for(int k = 1; k < 125; k++){
					temp1 = i%10;
					temp2 = i/10;
  fa:	2c e7       	ldi	r18, 0x7C	; 124
  fc:	30 e0       	ldi	r19, 0x00	; 0
										
					PORTD = ~(1<<3);
					PORTA = ~cyfry[temp1];
  fe:	a1 e0       	ldi	r26, 0x01	; 1
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	ac 0f       	add	r26, r28
 104:	bd 1f       	adc	r27, r29
 106:	a8 0f       	add	r26, r24
 108:	b1 1d       	adc	r27, r1
					_delay_ms(2);
										
					PORTD = ~(1<<2);
					PORTA = ~cyfry[temp2];
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	e6 0f       	add	r30, r22
 114:	f1 1d       	adc	r31, r1
			
				for(int k = 1; k < 125; k++){
					temp1 = i%10;
					temp2 = i/10;
										
					PORTD = ~(1<<3);
 116:	92 ba       	out	0x12, r9	; 18
					PORTA = ~cyfry[temp1];
 118:	8c 91       	ld	r24, X
 11a:	80 95       	com	r24
 11c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	83 ef       	ldi	r24, 0xF3	; 243
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0xa0>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa6>
 128:	00 00       	nop
					_delay_ms(2);
										
					PORTD = ~(1<<2);
 12a:	82 ba       	out	0x12, r8	; 18
					PORTA = ~cyfry[temp2];
 12c:	80 81       	ld	r24, Z
 12e:	80 95       	com	r24
 130:	8b bb       	out	0x1b, r24	; 27
 132:	83 ef       	ldi	r24, 0xF3	; 243
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0xb4>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xba>
 13c:	00 00       	nop
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	31 09       	sbc	r19, r1
    {
		for(int i = 2; i <= 142; i+=7){
			
		if(i < 100 && i > 10){
			
				for(int k = 1; k < 125; k++){
 142:	49 f7       	brne	.-46     	; 0x116 <main+0x94>
 144:	5d c0       	rjmp	.+186    	; 0x200 <main+0x17e>
					_delay_ms(2);
				}

		}
		
			else if(i >= 100){
 146:	04 36       	cpi	r16, 0x64	; 100
 148:	11 05       	cpc	r17, r1
 14a:	0c f4       	brge	.+2      	; 0x14e <main+0xcc>
 14c:	4b c0       	rjmp	.+150    	; 0x1e4 <main+0x162>
 14e:	c8 01       	movw	r24, r16
 150:	b6 01       	movw	r22, r12
 152:	0e 94 0a 01 	call	0x214	; 0x214 <__divmodhi4>
 156:	48 2f       	mov	r20, r24
 158:	cb 01       	movw	r24, r22
 15a:	b6 01       	movw	r22, r12
 15c:	0e 94 0a 01 	call	0x214	; 0x214 <__divmodhi4>
 160:	e8 2f       	mov	r30, r24
 162:	c8 01       	movw	r24, r16
 164:	b5 01       	movw	r22, r10
 166:	0e 94 0a 01 	call	0x214	; 0x214 <__divmodhi4>
 16a:	cb 01       	movw	r24, r22
 16c:	b6 01       	movw	r22, r12
 16e:	0e 94 0a 01 	call	0x214	; 0x214 <__divmodhi4>
				for(int k = 1; k <= 83; k++){
					temp1 = i%10;
					temp2 = (i/10)%10;
					temp3 = (i/100)%10;
 172:	23 e5       	ldi	r18, 0x53	; 83
 174:	30 e0       	ldi	r19, 0x00	; 0
					
					PORTD = ~(1<<3);
					PORTA = ~cyfry[temp1];
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	6c 0f       	add	r22, r28
 17c:	7d 1f       	adc	r23, r29
 17e:	64 0f       	add	r22, r20
 180:	71 1d       	adc	r23, r1
 182:	ab 01       	movw	r20, r22
					_delay_ms(2);
										
					PORTD = ~(1<<2);
					PORTA = ~cyfry[temp2];
 184:	a1 e0       	ldi	r26, 0x01	; 1
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	ac 0f       	add	r26, r28
 18a:	bd 1f       	adc	r27, r29
 18c:	ae 0f       	add	r26, r30
 18e:	b1 1d       	adc	r27, r1
					_delay_ms(2);
										
					PORTD = ~(1<<1);
				    PORTA = ~cyfry[temp3];
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	6c 0f       	add	r22, r28
 196:	7d 1f       	adc	r23, r29
 198:	68 0f       	add	r22, r24
 19a:	71 1d       	adc	r23, r1
				for(int k = 1; k <= 83; k++){
					temp1 = i%10;
					temp2 = (i/10)%10;
					temp3 = (i/100)%10;
					
					PORTD = ~(1<<3);
 19c:	92 ba       	out	0x12, r9	; 18
					PORTA = ~cyfry[temp1];
 19e:	fa 01       	movw	r30, r20
 1a0:	80 81       	ld	r24, Z
 1a2:	80 95       	com	r24
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	83 ef       	ldi	r24, 0xF3	; 243
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x128>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x12e>
 1b0:	00 00       	nop
					_delay_ms(2);
										
					PORTD = ~(1<<2);
 1b2:	82 ba       	out	0x12, r8	; 18
					PORTA = ~cyfry[temp2];
 1b4:	8c 91       	ld	r24, X
 1b6:	80 95       	com	r24
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	e3 ef       	ldi	r30, 0xF3	; 243
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x13c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x142>
 1c4:	00 00       	nop
					_delay_ms(2);
										
					PORTD = ~(1<<1);
 1c6:	72 ba       	out	0x12, r7	; 18
				    PORTA = ~cyfry[temp3];
 1c8:	fb 01       	movw	r30, r22
 1ca:	80 81       	ld	r24, Z
 1cc:	80 95       	com	r24
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	83 ef       	ldi	r24, 0xF3	; 243
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x152>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x158>
 1da:	00 00       	nop
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
				}

		}
		
			else if(i >= 100){
				for(int k = 1; k <= 83; k++){
 1e0:	e9 f6       	brne	.-70     	; 0x19c <main+0x11a>
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <main+0x17e>
				    PORTA = ~cyfry[temp3];
					_delay_ms(2);
				}
			}
			else{
					PORTD = ~(1<<3);
 1e4:	92 ba       	out	0x12, r9	; 18
					PORTA = ~cyfry[i];
 1e6:	f7 01       	movw	r30, r14
 1e8:	80 81       	ld	r24, Z
 1ea:	80 95       	com	r24
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	ff e9       	ldi	r31, 0x9F	; 159
 1f0:	26 e8       	ldi	r18, 0x86	; 134
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	f1 50       	subi	r31, 0x01	; 1
 1f6:	20 40       	sbci	r18, 0x00	; 0
 1f8:	60 40       	sbci	r22, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x172>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x17c>
 1fe:	00 00       	nop
	unsigned char cyfry[10] = {0b00111111, 0b00000110, 0b01011011,0b01001111, 0b01100110, 0b01101101,0b01111101,0b00000111, 0b01111111, 0b01101111};
		
    /* Replace with your application code */
    while (1) 
    {
		for(int i = 2; i <= 142; i+=7){
 200:	09 5f       	subi	r16, 0xF9	; 249
 202:	1f 4f       	sbci	r17, 0xFF	; 255
 204:	77 e0       	ldi	r23, 0x07	; 7
 206:	e7 0e       	add	r14, r23
 208:	f1 1c       	adc	r15, r1
 20a:	05 39       	cpi	r16, 0x95	; 149
 20c:	11 05       	cpc	r17, r1
 20e:	09 f0       	breq	.+2      	; 0x212 <main+0x190>
 210:	6b cf       	rjmp	.-298    	; 0xe8 <main+0x66>
 212:	64 cf       	rjmp	.-312    	; 0xdc <main+0x5a>

00000214 <__divmodhi4>:
 214:	97 fb       	bst	r25, 7
 216:	07 2e       	mov	r0, r23
 218:	16 f4       	brtc	.+4      	; 0x21e <__divmodhi4+0xa>
 21a:	00 94       	com	r0
 21c:	07 d0       	rcall	.+14     	; 0x22c <__divmodhi4_neg1>
 21e:	77 fd       	sbrc	r23, 7
 220:	09 d0       	rcall	.+18     	; 0x234 <__divmodhi4_neg2>
 222:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 226:	07 fc       	sbrc	r0, 7
 228:	05 d0       	rcall	.+10     	; 0x234 <__divmodhi4_neg2>
 22a:	3e f4       	brtc	.+14     	; 0x23a <__divmodhi4_exit>

0000022c <__divmodhi4_neg1>:
 22c:	90 95       	com	r25
 22e:	81 95       	neg	r24
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__divmodhi4_neg2>:
 234:	70 95       	com	r23
 236:	61 95       	neg	r22
 238:	7f 4f       	sbci	r23, 0xFF	; 255

0000023a <__divmodhi4_exit>:
 23a:	08 95       	ret

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
