
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d1  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ae  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d9  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdlib.h>


int main(void)
{
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
  70:	81 bb       	out	0x11, r24	; 17
	unsigned char cyfry[10] = {0b00111111, 0b00000110, 0b01011011,0b01001111, 0b01100110, 0b00101101,0b01111011,0b00000111, 0b01111111, 0b01101111};
		
    /* Replace with your application code */
    while (1) 
    {
		PORTD = ~_BV(0);
  72:	6e ef       	ldi	r22, 0xFE	; 254
		PORTA = ~cyfry[2];
  74:	54 ea       	ldi	r21, 0xA4	; 164
		_delay_ms(2);
		
		PORTD = ~_BV(1);
  76:	4d ef       	ldi	r20, 0xFD	; 253
		PORTA = ~cyfry[0];
  78:	80 ec       	ldi	r24, 0xC0	; 192
		_delay_ms(2);
		
		PORTD = ~_BV(2);
  7a:	3b ef       	ldi	r19, 0xFB	; 251
		PORTA = ~cyfry[0];
		_delay_ms(2);
		
		PORTD = ~_BV(3);
  7c:	27 ef       	ldi	r18, 0xF7	; 247
		PORTA = ~cyfry[1];
  7e:	99 ef       	ldi	r25, 0xF9	; 249
	unsigned char cyfry[10] = {0b00111111, 0b00000110, 0b01011011,0b01001111, 0b01100110, 0b00101101,0b01111011,0b00000111, 0b01111111, 0b01101111};
		
    /* Replace with your application code */
    while (1) 
    {
		PORTD = ~_BV(0);
  80:	62 bb       	out	0x12, r22	; 18
		PORTA = ~cyfry[2];
  82:	5b bb       	out	0x1b, r21	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	e3 ef       	ldi	r30, 0xF3	; 243
  86:	f1 e0       	ldi	r31, 0x01	; 1
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
		_delay_ms(2);
		
		PORTD = ~_BV(1);
  90:	42 bb       	out	0x12, r20	; 18
		PORTA = ~cyfry[0];
  92:	8b bb       	out	0x1b, r24	; 27
  94:	e3 ef       	ldi	r30, 0xF3	; 243
  96:	f1 e0       	ldi	r31, 0x01	; 1
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
		_delay_ms(2);
		
		PORTD = ~_BV(2);
  a0:	32 bb       	out	0x12, r19	; 18
		PORTA = ~cyfry[0];
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	e3 ef       	ldi	r30, 0xF3	; 243
  a6:	f1 e0       	ldi	r31, 0x01	; 1
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x3c>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
		_delay_ms(2);
		
		PORTD = ~_BV(3);
  b0:	22 bb       	out	0x12, r18	; 18
		PORTA = ~cyfry[1];
  b2:	9b bb       	out	0x1b, r25	; 27
  b4:	e3 ef       	ldi	r30, 0xF3	; 243
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
  c0:	df cf       	rjmp	.-66     	; 0x80 <main+0x14>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
